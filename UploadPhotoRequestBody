class UploadPhotoRequestBody(var file: File, private val formId: String) : RequestBody() {

    companion object {
        private const val SEGMENT_SIZE: Long = 2048
    }

    private val progressBehavior = BehaviorSubject.create<UploadStatus>()

    /**
     * Get Progress Behavior
     */
    fun getProgressBehavior(): BehaviorSubject<UploadStatus> = progressBehavior

    override fun contentType(): MediaType? = MultipartBody.create(MediaType.parse(file.getMimeType()), file).contentType()

    override fun contentLength(): Long = file.length()

    @Throws(IOException::class)
    override fun writeTo(sink: BufferedSink?) {
        val uploadStatus = UploadStatus.createSending(formId, file.absolutePath, 0, false)
        try {
            val source = Okio.source(file)
            val totalSize = contentLength()
            var remainingSize = totalSize
            var size = Math.min(SEGMENT_SIZE, remainingSize)
            progressBehavior.onNext(uploadStatus.apply {
                isError = false
            })
            while (remainingSize > 0) {
                sink?.write(source, size)
                val progress = (100 - ((remainingSize / totalSize.toFloat()) * 100))
                // Emit process values
                progressBehavior.onNext(uploadStatus.apply {
                    isError = false
                    processNum = progress.roundToInt()
                })
                remainingSize -= size
                size = Math.min(SEGMENT_SIZE, remainingSize)
            }
            // Emit completed processing.
            progressBehavior.onComplete()
        } catch (@NotNull ex: IOException) {
            progressBehavior.onErrorReturnItem(uploadStatus.apply {
                isError = true
            })
        }
    }
}
